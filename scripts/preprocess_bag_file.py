import logging
import math
import sys
import os

import genpy
import rosbag
import sensor_msgs.point_cloud2 as pc2
from pathlib import Path

logging.basicConfig(format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
                    datefmt='%m-%d:%H:%M:%S',
                    level=logging.DEBUG)
logger = logging.getLogger('logger')
logger.setLevel(logging.INFO)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        logging.warning(
            "Usage: python3 preprocess_bag_file.py /path/to/file.bag")
        sys.exit(1)

    bag_filename = sys.argv[1]
    output_bag_filename = "%s/%s-msf-loam%s" % (os.path.dirname(
        bag_filename), Path(bag_filename).stem, Path(bag_filename).suffix)

    logger.info("Reading bag file...")
    bag = rosbag.Bag(bag_filename, 'r')
    bag_output = rosbag.Bag(output_bag_filename, 'w', rosbag.Compression.LZ4)
    msg_gen = bag.read_messages(topics=[])

    topic2prev_msg = {}
    for topic, msg, _ in msg_gen:
        if not msg._type == 'sensor_msgs/PointCloud2':
            bag_output.write(topic, msg, msg.header.stamp)
            continue
        if not topic in topic2prev_msg:
            topic2prev_msg[topic] = msg
            continue
        # In real environment, topic2prev_msg[topic] is generated by driver
        # at msg.header.stamp not topic2prev_msg[topic].header.stamp
        # 20_000_000ns is set to be transfer latency.
        bag_output.write(topic, topic2prev_msg[topic], msg.header.stamp +
                         genpy.rostime.Duration(0, 20_000_000))
        topic2prev_msg[topic] = msg

    bag_output.close()
    bag.close()
